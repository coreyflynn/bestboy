import {
  foldersRequest,
  foldersRequestSuccess,
  foldersRequestFailure,
  createFolderRequest,
  createFolderSuccess,
  createFolderFailure,
  updateFolderRequest,
  updateFolderSuccess,
  updateFolderFailure,
  setViewMode,
  setSortDirection,
  setSortBy,
} from '../actions';

// Autogenerated tests
describe('foldersRequest', () => {
  it('should create an action with a type of folders/REQUEST', () => {
    expect(foldersRequest().type).toBe('folders/REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(foldersRequest({ parentId: 'Uganda', projectId: 'neural' }).payload).toEqual({
      parentId: 'Uganda',
      projectId: 'neural',
    });
  });
});
describe('foldersRequestSuccess', () => {
  it('should create an action with a type of folders/REQUEST_SUCCESS', () => {
    expect(foldersRequestSuccess().type).toBe('folders/REQUEST_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequestSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequestSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(foldersRequestSuccess('Cross-platform').payload).toBe('Cross-platform');
  });
});
describe('foldersRequestFailure', () => {
  it('should create an action with a type of folders/REQUEST_FAILURE', () => {
    expect(foldersRequestFailure().type).toBe('folders/REQUEST_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequestFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequestFailure(err).error).toBe(true);
  });
});
describe('createFolderRequest', () => {
  it('should create an action with a type of folders/CREATE_REQUEST', () => {
    expect(createFolderRequest().type).toBe('folders/CREATE_REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(
      createFolderRequest({ name: 'Concrete', projectId: 'haptic', parentId: 'optical' }).payload,
    ).toEqual({ name: 'Concrete', projectId: 'haptic', parentId: 'optical' });
  });
});
describe('createFolderSuccess', () => {
  it('should create an action with a type of folders/CREATE_SUCCESS', () => {
    expect(createFolderSuccess().type).toBe('folders/CREATE_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(createFolderSuccess('bypass').payload).toBe('bypass');
  });
});
describe('createFolderFailure', () => {
  it('should create an action with a type of folders/CREATE_FAILURE', () => {
    expect(createFolderFailure().type).toBe('folders/CREATE_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderFailure(err).error).toBe(true);
  });
});
describe('updateFolderRequest', () => {
  it('should create an action with a type of folders/UPDATE_REQUEST', () => {
    expect(updateFolderRequest().type).toBe('folders/UPDATE_REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(
      updateFolderRequest({ folderId: 'Investment Account', newName: 'support' }).payload,
    ).toEqual({ folderId: 'Investment Account', newName: 'support' });
  });
});
describe('updateFolderSuccess', () => {
  it('should create an action with a type of folders/UPDATE_SUCCESS', () => {
    expect(updateFolderSuccess().type).toBe('folders/UPDATE_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(updateFolderSuccess('Sri Lanka Rupee').payload).toBe('Sri Lanka Rupee');
  });
});
describe('updateFolderFailure', () => {
  it('should create an action with a type of folders/UPDATE_FAILURE', () => {
    expect(updateFolderFailure().type).toBe('folders/UPDATE_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderFailure(err).error).toBe(true);
  });
});
describe('setViewMode', () => {
  it('should create an action with a type of folders/SET_VIEW_MODE', () => {
    expect(setViewMode().type).toBe('folders/SET_VIEW_MODE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setViewMode(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setViewMode(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setViewMode('Gourde US Dollar').payload).toBe('Gourde US Dollar');
  });
});
describe('setSortDirection', () => {
  it('should create an action with a type of folders/SET_SORT_DIRECTION', () => {
    expect(setSortDirection().type).toBe('folders/SET_SORT_DIRECTION');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setSortDirection(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setSortDirection(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setSortDirection('Home Loan Account').payload).toBe('Home Loan Account');
  });
});
describe('setSortBy', () => {
  it('should create an action with a type of folders/SET_SORT_BY', () => {
    expect(setSortBy().type).toBe('folders/SET_SORT_BY');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setSortBy(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setSortBy(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setSortBy('Rubber').payload).toBe('Rubber');
  });
});
import {
  foldersRequest,
  foldersRequestSuccess,
  foldersRequestFailure,
  createFolderRequest,
  createFolderSuccess,
  createFolderFailure,
  updateFolderRequest,
  updateFolderSuccess,
  updateFolderFailure,
  setViewMode,
  setSortDirection,
  setSortBy,
} from '../actions';

// Autogenerated tests
describe('foldersRequest', () => {
  it('should create an action with a type of folders/REQUEST', () => {
    expect(foldersRequest().type).toBe('folders/REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(foldersRequest({ parentId: 'Canadian Dollar', projectId: 'Garden' }).payload).toEqual({
      parentId: 'Canadian Dollar',
      projectId: 'Garden',
    });
  });
});
describe('foldersRequestSuccess', () => {
  it('should create an action with a type of folders/REQUEST_SUCCESS', () => {
    expect(foldersRequestSuccess().type).toBe('folders/REQUEST_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequestSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequestSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(foldersRequestSuccess('Awesome Granite Chips').payload).toBe('Awesome Granite Chips');
  });
});
describe('foldersRequestFailure', () => {
  it('should create an action with a type of folders/REQUEST_FAILURE', () => {
    expect(foldersRequestFailure().type).toBe('folders/REQUEST_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequestFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequestFailure(err).error).toBe(true);
  });
});
describe('createFolderRequest', () => {
  it('should create an action with a type of folders/CREATE_REQUEST', () => {
    expect(createFolderRequest().type).toBe('folders/CREATE_REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(
      createFolderRequest({ name: 'attitude-oriented', projectId: 'Awesome', parentId: 'Refined' })
        .payload,
    ).toEqual({ name: 'attitude-oriented', projectId: 'Awesome', parentId: 'Refined' });
  });
});
describe('createFolderSuccess', () => {
  it('should create an action with a type of folders/CREATE_SUCCESS', () => {
    expect(createFolderSuccess().type).toBe('folders/CREATE_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(createFolderSuccess('Generic Frozen Sausages').payload).toBe('Generic Frozen Sausages');
  });
});
describe('createFolderFailure', () => {
  it('should create an action with a type of folders/CREATE_FAILURE', () => {
    expect(createFolderFailure().type).toBe('folders/CREATE_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderFailure(err).error).toBe(true);
  });
});
describe('updateFolderRequest', () => {
  it('should create an action with a type of folders/UPDATE_REQUEST', () => {
    expect(updateFolderRequest().type).toBe('folders/UPDATE_REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(updateFolderRequest({ folderId: 'intuitive', newName: 'Handcrafted' }).payload).toEqual({
      folderId: 'intuitive',
      newName: 'Handcrafted',
    });
  });
});
describe('updateFolderSuccess', () => {
  it('should create an action with a type of folders/UPDATE_SUCCESS', () => {
    expect(updateFolderSuccess().type).toBe('folders/UPDATE_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(updateFolderSuccess('Leone').payload).toBe('Leone');
  });
});
describe('updateFolderFailure', () => {
  it('should create an action with a type of folders/UPDATE_FAILURE', () => {
    expect(updateFolderFailure().type).toBe('folders/UPDATE_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderFailure(err).error).toBe(true);
  });
});
describe('setViewMode', () => {
  it('should create an action with a type of folders/SET_VIEW_MODE', () => {
    expect(setViewMode().type).toBe('folders/SET_VIEW_MODE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setViewMode(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setViewMode(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setViewMode('navigating').payload).toBe('navigating');
  });
});
describe('setSortDirection', () => {
  it('should create an action with a type of folders/SET_SORT_DIRECTION', () => {
    expect(setSortDirection().type).toBe('folders/SET_SORT_DIRECTION');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setSortDirection(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setSortDirection(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setSortDirection('Crest').payload).toBe('Crest');
  });
});
describe('setSortBy', () => {
  it('should create an action with a type of folders/SET_SORT_BY', () => {
    expect(setSortBy().type).toBe('folders/SET_SORT_BY');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setSortBy(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setSortBy(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setSortBy('neutral').payload).toBe('neutral');
  });
});
import {
  foldersRequest,
  foldersRequestSuccess,
  foldersRequestFailure,
  createFolderRequest,
  createFolderSuccess,
  createFolderFailure,
  updateFolderRequest,
  updateFolderSuccess,
  updateFolderFailure,
  setViewMode,
  setSortDirection,
  setSortBy,
} from '../actions';

// Autogenerated tests
describe('foldersRequest', () => {
  it('should create an action with a type of folders/REQUEST', () => {
    expect(foldersRequest().type).toBe('folders/REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(foldersRequest({ parentId: 'Pennsylvania', projectId: 'Cotton' }).payload).toEqual({
      parentId: 'Pennsylvania',
      projectId: 'Cotton',
    });
  });
});
describe('foldersRequestSuccess', () => {
  it('should create an action with a type of folders/REQUEST_SUCCESS', () => {
    expect(foldersRequestSuccess().type).toBe('folders/REQUEST_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequestSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequestSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(foldersRequestSuccess('Divide').payload).toBe('Divide');
  });
});
describe('foldersRequestFailure', () => {
  it('should create an action with a type of folders/REQUEST_FAILURE', () => {
    expect(foldersRequestFailure().type).toBe('folders/REQUEST_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequestFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequestFailure(err).error).toBe(true);
  });
});
describe('createFolderRequest', () => {
  it('should create an action with a type of folders/CREATE_REQUEST', () => {
    expect(createFolderRequest().type).toBe('folders/CREATE_REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(
      createFolderRequest({ name: 'Small Soft Ball', projectId: 'Cotton', parentId: 'seize' })
        .payload,
    ).toEqual({ name: 'Small Soft Ball', projectId: 'Cotton', parentId: 'seize' });
  });
});
describe('createFolderSuccess', () => {
  it('should create an action with a type of folders/CREATE_SUCCESS', () => {
    expect(createFolderSuccess().type).toBe('folders/CREATE_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(createFolderSuccess('Connecticut').payload).toBe('Connecticut');
  });
});
describe('createFolderFailure', () => {
  it('should create an action with a type of folders/CREATE_FAILURE', () => {
    expect(createFolderFailure().type).toBe('folders/CREATE_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(createFolderFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(createFolderFailure(err).error).toBe(true);
  });
});
describe('updateFolderRequest', () => {
  it('should create an action with a type of folders/UPDATE_REQUEST', () => {
    expect(updateFolderRequest().type).toBe('folders/UPDATE_REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(updateFolderRequest({ folderId: 'Cambridgeshire', newName: 'Wooden' }).payload).toEqual({
      folderId: 'Cambridgeshire',
      newName: 'Wooden',
    });
  });
});
describe('updateFolderSuccess', () => {
  it('should create an action with a type of folders/UPDATE_SUCCESS', () => {
    expect(updateFolderSuccess().type).toBe('folders/UPDATE_SUCCESS');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderSuccess(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderSuccess(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(updateFolderSuccess('Toys').payload).toBe('Toys');
  });
});
describe('updateFolderFailure', () => {
  it('should create an action with a type of folders/UPDATE_FAILURE', () => {
    expect(updateFolderFailure().type).toBe('folders/UPDATE_FAILURE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(updateFolderFailure(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(updateFolderFailure(err).error).toBe(true);
  });
});
describe('setViewMode', () => {
  it('should create an action with a type of folders/SET_VIEW_MODE', () => {
    expect(setViewMode().type).toBe('folders/SET_VIEW_MODE');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setViewMode(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setViewMode(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setViewMode('Infrastructure').payload).toBe('Infrastructure');
  });
});
describe('setSortDirection', () => {
  it('should create an action with a type of folders/SET_SORT_DIRECTION', () => {
    expect(setSortDirection().type).toBe('folders/SET_SORT_DIRECTION');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setSortDirection(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setSortDirection(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setSortDirection('copying').payload).toBe('copying');
  });
});
describe('setSortBy', () => {
  it('should create an action with a type of folders/SET_SORT_BY', () => {
    expect(setSortBy().type).toBe('folders/SET_SORT_BY');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(setSortBy(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(setSortBy(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(setSortBy('digital').payload).toBe('digital');
  });
});
import { foldersRequest } from '../actions';

// Autogenerated tests
describe('foldersRequest', () => {
  it('should create an action with a type of folders/REQUEST', () => {
    expect(foldersRequest().type).toBe('folders/REQUEST');
  });

  it('should set an Error as the payload if called with one', () => {
    const err = new Error('test');
    expect(foldersRequest(err).payload instanceof Error).toBe(true);
  });

  it('should set an error attribute if called with an Error', () => {
    const err = new Error('test');
    expect(foldersRequest(err).error).toBe(true);
  });

  it('should create an action with an appropriate payload creator', () => {
    expect(foldersRequest({ parentId: 'Solutions', projectId: 'Investor' }).payload).toEqual({
      parentId: 'Solutions',
      projectId: 'Investor',
    });
  });
});
